YUI.add('moodle-block_skype_web-skype', function (Y) {
    var ModulenameNAME = 'skpe';
    var token = '';
    var MODULENAME = function () {
        MODULENAME.superclass.constructor.apply(this, arguments);
    };
    Y.extend(MODULENAME, Y.Base, {
        initializer: function (config) {

            var skype_state = '';
            var skype_div = document.getElementById('skype_status');
            var skypeConfig = {
                version: 'SkypeOnlinePreviewApp/1.0.0', // this helps to identify telemetry generated by the samples
                apiKey: 'a42fcebd-5b43-4b89-a065-74450fb91255', // SDK DF
                apiKeyCC: '9c967f6b-a846-4df2-b43d-5167e47d81e1' // SDK+CC DF
            };

            Skype.initialize({apiKey: skypeConfig.apiKey}, function (api) {
                window.skypeWebAppCtor = api.application;
                window.skypeWebApp = new api.application();

                var client = window.skypeWebApp;

                window.skypeWebApp.signInManager.state.changed(function (state) {
                    console.log(state);
                    skype_div.innerHTML = state;
                    skype_state = state;
                    if (state == 'SignedIn') {
                        document.getElementById('new_meeting').style.display = 'block';
                    }
                });

                var params =
                {
                    "client_id": config.client_id,
                    "origins": ["https://webdir.online.lync.com/autodiscover/autodiscoverservice.svc/root"],
                    "cors": true,
                    "version": 'SkypeWebMoodle/1.0.0'
                };
                // start signing in

                client.signInManager.signIn(
                    params
                ).then(function () {
                    // when the sign in operation succeeds display the user name
                    console.log('Signed in as ' + client.personsAndGroupsManager.mePerson.displayName());

                    // join an online meeting and start video
                    // document.getElementById("btn-add-startNewVideoMeeting").removeEventListener('click', function () {});
                    document.getElementById('startNewVideoMeeting').onclick = function () {
                        console.log('new meeting');
                        var conv, dfd, meetingUri;
                        conv = client.conversationsManager.createConversation();
                        console.log(conv);
                        document.getElementById('newMeetingUri').value = '';
                        document.getElementById('starting').style.display = 'block';
                        dfd = conv.videoService.start().then(function () {
                            meetingUri = conv.uri();
                            console.log(meetingUri);
                            document.getElementById('newMeetingUri').value = meetingUri;
                            document.getElementById('meeting').style.display = 'block';
                            document.getElementById('starting').style.display = 'none';
                        });
                        console.log(dfd);
                    };

                    // document.getElementById("btn-add-participant").removeEventListener('click', function () {});
                    document.getElementById("btn-add-participant").onclick = function () {
                        var conv = client.conversationsManager.conversations(0), uri = document.getElementById('txt-contact').value, dfd;
                        console.log(uri);
                        document.getElementById('txt-contact').value = '';
                        if (true) {
                            var pSearch = client.personsAndGroupsManager.createPersonSearchQuery();
                            pSearch.text(uri);
                            pSearch.limit(1);
                            pSearch.getMore().then(function () {
                                var sr = pSearch.results();
                                if (sr.length == 0)
                                    alert('Contact not found');

                                return sr[0].result;
                            }).then(function (contact) {
                                contact.displayName.get().then(function (displayName) {
                                    var li = document.createElement('li');
                                    li.innerHTML = displayName
                                    document.getElementById('participants').appendChild(li);
                                    dfd = addParticipant(conv, uri);
                                });
                            }).then(null, function (error) {
                                // if either of the steps above threw an exception,
                                // catch it here and display to the user
                                alert('Something went wrong. Please try again.');
                            });
                        }
                    };

                    client.conversationsManager.conversations.get().then(function (conversationsArray) {
                        if (conversationsArray && conversationsArray.length > 0) {
                            conversationsArray.forEach(function (element, index, array) {
                                console.log("Closing existed conversation...");
                                client.conversationsManager.conversations.remove(element);
                            });
                        }
                    });

                    var addedListener = client.conversationsManager.conversations.added(function (conversation) {
                        var chatService, dfdChatAccept, audioService, dfdAudioAccept, videoService, dfdVideoAccept, selfParticipant, name, timerId;
                        selfParticipant = conversation.selfParticipant;
                        chatService = conversation.chatService;
                        audioService = conversation.audioService;
                        videoService = conversation.videoService;
                        if (chatService.accept.enabled()) {
                            name = conversation.participants(0).person.displayName();
                            if (confirm('Accept incoming chat request from ' + name + '?')) {
                                console.log('accepting the incoming chat request');
                                dfdChatAccept = chatService.accept();
                                monitor('Accepting chat request from ' + name, dfdChatAccept);
                            }
                            else {
                                console.log('declining the incoming chat request');
                                chatService.reject();
                            }
                        }
                        // participant audio and video state changes
                        conversation.participants.added(function (p) {
                            p.video.state.changed(function (newState, reason, oldState) {
                                // a convenient place to set the video stream container
                                console.log(newState);
                                if (newState == 'Connected'){
                                    p.person.displayName.get().then(function (displayName) {
                                        console.log(displayName);
                                        var conversation = document.createElement('div');
                                        conversation.className = 'conversation';
                                        conversation.style.textAlign = 'center';

                                        var header = document.createElement('div');
                                        header.className = 'header';

                                        var h3 = document.createElement('h3');
                                        h3.innerHTML = displayName;

                                        var av_container = document.createElement('div');
                                        av_container.className = 'av-container';
                                        var render_window = document.createElement('div');
                                        render_window.className = 'render-window';
                                        render_window.id = displayName.split(' ').join('_');

                                        av_container.appendChild(render_window);
                                        header.appendChild(h3);

                                        conversation.appendChild(header);
                                        conversation.appendChild(av_container);

                                        document.getElementsByClassName('conference')[0].appendChild(conversation);
                                        var channel = p.video.channels(0);
                                        channel.stream.source.sink.container(document.getElementById(displayName.split(' ').join('_')));
                                        var dfd = channel.isStarted.set(true);
                                        console.log(document.getElementById(displayName.split(' ').join('_')));
                                        console.log(dfd);
                                    });

                                }
                            });
                            p.audio.state.changed(function (newState, reason, oldState) {
                                //onChanged('_participant.audio.state', newState, reason, oldState);
                            });
                        });
                        function onAudioVideoNotified() {
                            // AV invitation may come from a 1:1 conversation only, so the caller is
                            // the single participant in the participants collection
                            var name = conversation.participants(0).person.displayName();
                            if (selfParticipant.video.state() == 'Notified') {
                                if (confirm('Accept a video call from ' + name + '?')) {
                                    console.log('accepting a video call');
                                    // selfParticipant video stream container can be set before we
                                    // accept the incominng video call or after it is accepted or even
                                    // later, when the selfParticipant video state becomes "Connected"
                                    dfdVideoAccept = videoService.accept();
                                    monitor('Accepting video request from ' + name, dfdVideoAccept);
                                }
                                else if (confirm('Accept a video call from ' + name + ' with audio only?\n' +
                                        '(You will still see the incoming video)')) {
                                    console.log('accepting a video call with audio');
                                    dfdAudioAccept = audioService.accept();
                                    monitor('Accepting audio request from ' + name, dfdAudioAccept);
                                }
                                else {
                                    console.log('declining the incoming video request');
                                    videoService.reject();
                                }
                            }
                            else if (selfParticipant.audio.state() == 'Notified') {
                                if (confirm('Accept an audio call from ' + name + '?')) {
                                    console.log('accepting the audio call');
                                    dfdAudioAccept = audioService.accept();
                                    monitor('Accepting audio call from ' + name, dfdAudioAccept);
                                }
                                else {
                                    console.log('declining the incoming audio request');
                                    audioService.reject();
                                }
                            }
                            timerId = null;
                        }

                        selfParticipant.audio.state.changed(function (newState, reason, oldState) {
                            if (newState == 'Notified' && !timerId)
                                timerId = setTimeout(onAudioVideoNotified, 0);
                        });
                        selfParticipant.video.state.changed(function (newState, reason, oldState) {
                            var selfChannel;
                            if (newState == 'Notified' && !timerId) {
                                timerId = setTimeout(onAudioVideoNotified, 0);
                            }
                            else if (newState == 'Connected') {
                                selfChannel = conversation.selfParticipant.video.channels(0);
                                selfChannel.stream.source.sink.container.set(document.getElementById("previewWindow"));
                                console.log(document.getElementById("self_video"));
                                document.getElementById("self_video").style.display = 'block';
                            }
                        });
                        conversation.state.changed(function onDisconnect(state) {
                            if (state == 'Disconnected') {
                                conversation.state.changed.off(onDisconnect);
                                client.conversationsManager.conversations.remove(conversation);
                            }
                        });
                    });
                    registeredListeners.push(addedListener);
                    function addParticipant(conv, uri) {
                        var person, participant, searchQuery;
                        searchQuery = client.personsAndGroupsManager.createPersonSearchQuery();
                        searchQuery.text(uri);
                        return searchQuery.getMore().then(function (results) {
                            person = results[0].result;
                            participant = conv.createParticipant(person);
                            conv.participants.add(participant);
                            conv.chatService.sendMessage('Hi, meeting now!');
                        });
                    }




                }, function (error) {
                    console.log(error || 'Cannot sign in');
                });

            }, function (err) {
                console.log(err);
                alert('Cannot load the Skype SDK.');
            });
        }
    }, {
        NAME: ModulenameNAME,
        ATTRS: {
            aparam: {}
        }
    });
    M.block_skype_web = M.block_skype_web || {};

    M.block_skype_web.init_skype = function (config) {
        return new MODULENAME(config);
    };

}, '@VERSION@', {
    requires: ['base']
});