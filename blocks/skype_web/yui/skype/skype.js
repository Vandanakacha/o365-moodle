YUI.add('moodle-block_skype_web-skype', function (Y) {
    var ModulenameNAME = 'skpe';
    var token = '';
    var MODULENAME = function () {
        MODULENAME.superclass.constructor.apply(this, arguments);
    };
    Y.extend(MODULENAME, Y.Base, {
        initializer: function (config) {

            var skype_state = '';
            var skype_div = document.getElementById('skype_status');
            var skypeConfig = {
                version: 'SkypeOnlinePreviewApp/1.0.0', // this helps to identify telemetry generated by the samples
                apiKey: 'a42fcebd-5b43-4b89-a065-74450fb91255', // SDK DF
                apiKeyCC: '9c967f6b-a846-4df2-b43d-5167e47d81e1' // SDK+CC DF
            };

            Skype.initialize({apiKey: skypeConfig.apiKey}, function (api) {
                window.skypeWebAppCtor = api.application;
                window.skypeWebApp = new api.application();

                var client = window.skypeWebApp;
                
                window.skypeWebApp.signInManager.state.changed(function (state) {
                    console.log(state);
                    skype_div.innerHTML = state;
                    skype_state = state;
                });

                var params =
                {
                    "client_id": "9dd17984-497f-42e1-8304-a3c7f2b5e9c4",
                    "origins": ["https://webdir.online.lync.com/autodiscover/autodiscoverservice.svc/root"],
                    "cors": true,
                    "version": 'SkypeWebMoodle/1.0.0'
                };
                // start signing in

                client.signInManager.signIn(
                    params
                ).then(function () {
                    // when the sign in operation succeeds display the user name
                    console.log('Signed in as ' + client.personsAndGroupsManager.mePerson.displayName());
                    console.log(document.getElementById('btn-start-messaging'));

                    document.querySelector('body').addEventListener('keydown', function(event) {

                        if (event.target.id == 'input-message') {
                            if (event.keyCode == 13) {
                                event.preventDefault();
                                sendMessage();
                            }
                        }

                        if (event.target.id == 'chat-to') {
                            if (event.keyCode == 13) {
                                event.preventDefault();
                                startInstantMessaging();
                            }
                        }
                    });
                    
                    document.getElementById('btn-start-messaging').onclick = function (e) {
                        if (skype_state == 'SignedIn') {
                            startInstantMessaging();
                        } else {
                            alert('You are not signed in yet. Please wait to sign in Skype');
                        }

                    };

                    document.getElementById('btn-send-message').onclick = function () {
                        sendMessage();
                    };



                    client.conversationsManager.conversations.get().then(function (conversationsArray) {
                        if (conversationsArray && conversationsArray.length > 0) {
                            var status = document.getElementById('status');
                            status.innerText = 'Disconnected existed conversation.';
                            // $('#status').text('Disconnected existed conversation.');
                            conversationsArray.forEach(function (element, index, array) {
                                console.log("Closing existed conversation...");
                                element.chatService.stop();
                            });
                        }
                    });

                    var addedListener = client.conversationsManager.conversations.added(function (conversation) {
                        var con = client.conversationsManager.conversations(0);
                        if (con && con.selfParticipant.chat.state() == "Connected")
                            return;
                        chatService = conversation.chatService;
                        chatService.accept.enabled.when(true, function () {
                            // instead of using chatService.accept.enabled.changed, selfParticipant.chat.state.changed should also work.
                            // conversation.selfParticipant.chat.state.changed(function (state) {
                            var fAccept = confirm("Accept this IM invitation?");
                            if (fAccept) {
                                incomingMessageCount = 0;
                                chatService.accept();
                                uiToChatState();
                                var chat_name = document.getElementsByClassName('chat-name');
                                chat_name[0].innerHTML = conversation.participants(0).person.displayName();
                                // $(".chat-name").text(conversation.participants(0).person.displayName());
                            }
                            else {
                                chatService.reject();
                            }
                            conversation.historyService.activityItems.added(function (message) {
                                incomingMessageCount++;
                                if (incomingMessageCount != 2) {
                                    historyAppend(XMessage(message));
                                }
                            });
                        });
                    });

                    registeredListeners.push(addedListener);
                    var removedListener = client.conversationsManager.conversations.removed(function (conversation) {
                        console.log('one conversation is removed');
                    });
                    registeredListeners.push(removedListener);

                    function sendMessage() {
                        // var message = $("#input-message").text();
                        var message = document.getElementById('input-message').innerHTML;
                        if (message) {
                            chatService.sendMessage(message).catch(function (e) {
                                console.log('Cannot send the message');
                                console.log(e);
                            });
                        }
                        // $("#input-message").text("");
                        document.getElementById('input-message').innerHTML = "";
                    }

                    function startInstantMessaging() {
                        var pSearch = client.personsAndGroupsManager.createPersonSearchQuery();
                        pSearch.limit(1);
                        // pSearch.text($('#chat-to').text());
                        alert(document.getElementById('chat-to').value);
                        pSearch.text(document.getElementById('chat-to').value);
                        pSearch.getMore().then(function () {
                            var sr = pSearch.results();
                            if (sr.length < 1)
                                alert('Contact not found');
                            return sr[0].result;
                        }).then(function (contact) {
                            console.log(contact);
                            uiToChatState();
                            // $(".chat-name").text(contact.displayName());
                            console.log(contact.displayName());
                            document.getElementsByClassName('chat-name')[0].innerHTML = contact.displayName();
                            var conversation = client.conversationsManager.getConversation(contact);
                            chatService = conversation.chatService;
                            conversation.selfParticipant.chat.state.when("Connected", function (state) {
                                addNotification('Conversation state: ' + state);
                                console.log(state);
                                addNotification('Now you can send messages');
                                conversation.historyService.activityItems.added(function (message) {
                                    historyAppend(XMessage(message));
                                });
                            });
                            chatService.start().then(function () {
                                chatService.sendMessage('How are you?');
                            });
                        }).then(null, function (error) {
                            console.error(error);
                            addNotification('Search failed ' + error);
                        });
                        function addNotification(text) {
                            // $(".notification").text(text);
                            document.getElementsByClassName('notification')[0].innerHTML = text;
                        }
                    }

                    function XMessage(message) {
                        // var xTitle = $('<div>').addClass('sender');
                        var xTitle = document.createElement('div').attr('class', 'sender');
                        // var xStatus = $('<div>').addClass('status');
                        var xStatus = document.createElement('div').attr('class', 'status');
                        // var xText = $('<div>').addClass('text').text(message.text());
                        var xText = document.createElement('div').attr('class', 'sender').innerHTML= message.text();
                        // var xMessage = $('<div>').addClass('message');
                        var xMessage = document.createElement('div').attr('class', 'message');
                        xMessage.append(xTitle, xStatus, xText);
                        if (message.sender) {
                            message.sender.displayName.get().then(function (displayName) {
                                xTitle.text(displayName);
                            });
                        }
                        message.status.changed(function (status) {
                            //xStatus.text(status);
                        });
                        if (message.sender.id() == client.personsAndGroupsManager.mePerson.id())
                            xMessage.addClass("fromMe");
                        return xMessage;
                    }

                    function uiToChatState() {
                        // $("#input-message").show();
                        document.getElementById('input-message').style.display = 'block';
                        // $("#start").hide();
                        document.getElementById('start').style.display = 'none';
                        // $('#status-header').show();
                        document.getElementById('status-header').style.display = "block";
                    }

                    function uiToStartState() {
                        $("#message-history").empty();
                        $("#input-message").hide();
                        $("#start").show();
                        $('#status-header').hide();
                    }
                    function historyAppend(message) {
                        var xHistory = document.getElementById('message-history');
                        xHistory.append(message);
                        xHistory.animate({ "scrollTop": xHistory.scrollHeight }, 'fast');
                    }

                }, function (error) {
                    console.log(error || 'Cannot sign in');
                });

            }, function (err) {
                console.log(err);
                alert('Cannot load the Skype SDK.');
            });
        }
    }, {
        NAME: ModulenameNAME,
        ATTRS: {
            aparam: {}
        }
    });
    M.block_skype_web = M.block_skype_web || {};

    M.block_skype_web.init_skype = function (config) {
        return new MODULENAME(config);
    };

}, '@VERSION@', {
    requires: ['base']
});